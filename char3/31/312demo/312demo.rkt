#lang racket
(define random-init 1)
(define (rand-update x)
  (+ (* x 2) 3)
  )
(define rand
  (let ((x random-init))
    (lambda () (begin (set! x (rand-update x)) x) )
    )
  )
(define (estimate-pi trials)
  (sqrt (/ 6.0 (monte-carlo trials cesaro-test)))
  )
(define (cesaro-test)
  (=  (gcd (rand) (rand)) 1)
  )
(define (monte-carlo trials experiment)
  (define (iter trials-remaining trials-passed)
    (cond
      ((= trials-remaining 0) (/ trials-passed trials))
      ((experiment) (iter (- trials-remaining 1) (+ trials-passed 1)))
      (else
       (iter (- trials-remaining 1) trials-passed)
       )
      )
    )
  (iter trials 0)
  )
(define (random-in-range low high)
  (let ((range (- high low)))
    (+ low (random range))
    )
  )

