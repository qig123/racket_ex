#lang Racket
(define (memo-proc proc)
  (let ((already-run? false) (result false))
    (lambda ()
      (if (not already-run?)
          (begin (set! result (proc))
                 (set! already-run? true)
                 )
          result
          )
      )
    )
  )
(define (delay exp)
   (memo-proc  (lambda () exp) ))
  
(define (force delayed-object)
  (delayed-object))
(define (sqr x) (* x x))
(define (test t)
  (lambda (t) (* t 2))
  )
(define (cons-stream a b)
             (cons a (delay b))
             )
( define (stream-car x) (car x))
(define (stream-cdr x) (cdr x))

(define (stream-null? stream) (null? stream))
(define (stream-filter pred stream)
  (cond
    ((stream-null? stream) null)
    ((pred (stream-car)) (cons-stream (stream-car stream)
                                      (stream-filter pred (stream-cdr stream))
                                      ))
    (else (stream-filter pred (stream-cdr stream)))
    )
  )

