#lang Racket
(define  (abs x)
  (cond ((> x 0) x)
        ((= x 0) 0)
        ((< x 0) (- 0 x))
        )
  )
(define (eval exp env)
  (cond ((self-evaluating? exp) exp)
        ((variable? exp) (lookup-variable-value exp env))
        ((quoted? exp) (text-of-quotation exp))
        ((assignment? exp) (eval-assignment exp env))
        ((definition? exp) (eval-definition exp env))
        ((if? exp) (eval-if exp env))
        ((lambda? exp) (make-procedure (lambda-parameters exp)
                                       (lambda-body exp)
                                       env))
        ((begin? exp) (eval-sequence (begin-actions exp) env))
        ((cond? exp) (eval (cond->if exp) env))
        ((application? exp) (apply (eval (operator exp) env)
                                   (list-of-value (operands exp) env)
                                   ))
        (else (error "Unknow exp type --EVAL" exp))
        )
  )
(define (apply procedure arguments)
  (cond ((primitive-procedure? procedure)
         (apply-promitive-procedure procedure arguments))
        ((compound-procedure? procedure)
         (eval-sequence
          (procedure-body procedure)
          (evtend-environment
           (procedure-parameters procedure)
           arguments
           (procedure-environment procedure)))
           )
        (else (error "Unknown procedure type--APPLY" -- procedure))
          )
  )
;生成实际参数表
(define (list-of-values exps env)
  (if (no-operands? exps)
      '()
      (cons (eval (first-operand exps) env)
            (list-of-values (rest-operands exps) env)
            )
      )
  )
