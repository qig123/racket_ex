#lang racket
(define (random-in-range low high)
  (let((range (- high low)))
    (+ low (random range))
    )
  )
(define (random-in-range2)
   (random)
  )
(define random-init 100000)
(define rand
  (let((x random-init))
    (lambda ()
      (set! x ( random-in-range 1 random-init ))
      x
      )
    )
  )
;(define (rand-update x) (random x))
;(define (estimate-integral p x1 x2 y1 y2 trials))

(define (estimate-pi trials)
  (sqrt (/ 6 (monte-carlo trials cesaro-test)))
  )
(define (estimate-pi2 trials x1 y1 x2 y2)
   (define (in-circle?)
   ( let ((w ( random))
            (h ( random))
             (r (/ (- x2 x1) 2))
             (rx (+ x1 (/ (- x2 x1) 2)))
             (ry (+ y1 (/ (- x2 x1) 2))))
      (>= (*  r r) (+ (* (- w rx) (- w rx)) (* (- h ry) (- h ry))))
     )
  )
  ( * 4.0 (monte-carlo trials in-circle?))
  )
(define (cesaro-test)
  (= (gcd (rand) (rand) ) 1)
  )

(define (monte-carlo trials experiment)
  (define (iter trials-remaining trials-passed)
    (cond ((= trials-remaining 0)
           (/ trials-passed trials))
          ((experiment)
           (iter (- trials-remaining 1)
                 (+ trials-passed 1))
           )
          (else
           (iter (- trials-remaining 1) trials-passed)
           )
          )
    )
  (iter trials 0)
  )

;(monte-carlo trials experiment)  (estimate-pi 3000) (monte-carlo 100000 cesaro-test) (estimate-pi2 100000)
;(estimate-pi2 10000000 2 4 8 10) (estimate-pi2 100000 0 0 1 1)
